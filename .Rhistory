allsongs <- read.csv("wikisongs.csv", stringsAsFactors=FALSE)
thesesongs <- allsongs[grep("love",allsongs$lyrics), ]
freq <- sapply(gregexpr("love",allsongs$lyrics),function(x)if(x[[1]]!=-1) length(x) else 0)
df<-data.frame(allsongs$lyrics,freq)
n <- gregexpr("love",allsongs$lyrics)
head(N)
head(n)
length{n[[1]]}
length(n[[1]])
length(n[[5]])
length(n)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
allsongs$year[2]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
keywordcount <- data.frame(c("year", "count", "keyword"))
keywordcount
source('~/.active-rstudio-document')
keywordcount
source('~/.active-rstudio-document')
thisentry
legnth(counts[[5100]])
length(counts[[5100]])
length(counts[[100]])
thisentry <- c(allsongs$year[i], length(counts[[i]]), keyword)
rbind(keywordcount, thisentry)
source('~/.active-rstudio-document')
thisentry <- data.frame(thisentry)
thisentry
source('~/.active-rstudio-document')
thisentry <- data.frame(c(year=allsongs$year[i], length=length(counts[[i]]), keyword=keyword))
thisentry <- c(allsongs$year[i], length(counts[[i]]), keyword)
thisentry <- data.frame(c(year=allsongs$year[i], length=length(counts[[i]]), keyword=keyword))
thisentry
thisentry <- c(allsongs$year[i], length(counts[[i]]), keyword)
thisentry <- data.frame(year=allsongs$year[i], length=length(counts[[i]]), keyword=keyword)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
counts <- gregexpr(keyword, allsongs$lyrics)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
n <- as.data.frame(counts)
n <- data.frame(counts)
freq <- sapply(gregexpr("love",allsongs$lyrics),function(x)if(x[[1]]!=-1) length(x) else 0)
keysongs <- cbind(allsongs, freq)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ggplot(aes(allsongs$year, allsongs$freq)) + geom_line()
library("ggplot2")
ggplot(aes(allsongs$year, allsongs$freq)) + geom_line()
ggplot(aes(keysongs$year, keysons$freq)) + geom_line()
ggplot(aes(keysongs$year, keysongs$freq)) + geom_line()
ggplot(keysongs, aes(year, freq)) + geom_line()
aggregate(freq~year, data=keysongs, FUN=sum)
source('~/.active-rstudio-document')
ggplot(combo, aes(year, freq)) + geom_line()
ggplot(combo, aes(year, freq)) + geom_line(aes(color=word),size=1.25) + ylim(0,100) +
}
ggplot(combo, aes(year, freq)) + geom_line(aes(color=word),size=1.25) + ylim(0,100) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing certain words"), x="", y="") +
theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
source('~/.active-rstudio-document')
ggplot(combo, aes(year, freq)) + geom_line(size=1.25) + ylim(0,1000) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing certain words"), x="", y="") +
theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(combo, aes(year, freq)) + geom_line(size=1.25) + ylim(0,1000) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing",keyword), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
source('~/.active-rstudio-document')
ggplot(combo, aes(year, freq)) + geom_line(size=1.25) + ylim(0,1000) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing",keyword), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
source('~/.active-rstudio-document')
ggplot(combo, aes(year, freq)) + geom_line(size=1.25) + ylim(0,1000) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing",keyword), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(combo, aes(year, freq)) + geom_line(size=1.25) + ylim(0,500) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing",keyword), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
source('~/.active-rstudio-document')
ggplot(combo, aes(year, freq)) + geom_line(size=1.25) + ylim(0,500) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing",keyword), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
source('~/.active-rstudio-document', echo=TRUE)
# The function `show_word_counts(x,z)` takes two parameters: the word(s) to look for and the y-limit for the output plot.
show_word_counts <- function(x,z) { # where x is words to check and z is the y-lim value
grouping <- data.frame()
# loop through the words provided as a list in x
for (w in x) {
freq <- sapply(gregexpr(keyword,allsongs$lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
keysongs <- cbind(allsongs, freq)
count <- aggregate(freq~year, data=keysongs, FUN=sum)
for (i in 1:length(count[,1])) { # account for missing years with a loop
# loop over each row in count
for ( y in 1:51 ) {
# compare to each row in countbyyear until we find the right year
if (count[i,1]==countbyyear[y,1]) {
# multiply by the appropriate weight
count$weight[i] <- countbyyear$weights[y]
count$weighted[i] <- countbyyear$weights[y]*count[i,2]
count$check[i] <- count$weighted[i]/count$weight[i]
}
}
}
count$word <- rep(w, length(count$check))
grouping <- rbind(grouping, count)
}
colnames(grouping) <- c("year", "unweighted", "weight", "weighted", "check", "word")
# make the plot
ggplot(grouping, aes(year, weighted)) +
geom_line(aes(color=word),size=1.25) +
ylim(0,z) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Keyword appearance in song lyrics\nBillboard Year-End Hot 100 Songs 1964-2014"), x="", y="") +
theme(plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(),
axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
# The function `show_word_counts(x,z)` takes two parameters: the word(s) to look for and the y-limit for the output plot.
show_word_counts <- function(x,z) { # where x is words to check and z is the y-lim value
grouping <- data.frame()
# loop through the words provided as a list in x
for (w in x) {
freq <- sapply(gregexpr(keyword,allsongs$lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
keysongs <- cbind(allsongs, freq)
count <- aggregate(freq~year, data=keysongs, FUN=sum)
for (i in 1:length(count[,1])) { # account for missing years with a loop
# loop over each row in count
for ( y in 1:51 ) {
# compare to each row in countbyyear until we find the right year
if (count[i,1]==countbyyear[y,1]) {
# multiply by the appropriate weight
count$weight[i] <- countbyyear$weights[y]
count$weighted[i] <- countbyyear$weights[y]*count[i,2]
count$check[i] <- count$weighted[i]/count$weight[i]
}
}
}
count$word <- rep(w, length(count$check))
grouping <- rbind(grouping, count)
}
colnames(grouping) <- c("year", "unweighted", "weight", "weighted", "check", "word")
# make the plot
ggplot(grouping, aes(year, freq)) +
geom_line(aes(color=word),size=1.25) +
ylim(0,z) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Keyword appearance in song lyrics\nBillboard Year-End Hot 100 Songs 1964-2014"), x="", y="") +
theme(plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(),
axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
show_word_counts(c("heart", "love"), 100)
x <- "hate"
z <- 500
freq <- sapply(gregexpr(keyword,allsongs$lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
keysongs <- cbind(allsongs, freq)
count <- aggregate(freq~year, data=keysongs, FUN=sum)
count
for (i in 1:length(count[,1])) { # account for missing years with a loop
# loop over each row in count
for ( y in 1:51 ) {
# compare to each row in countbyyear until we find the right year
if (count[i,1]==countbyyear[y,1]) {
# multiply by the appropriate weight
count$weight[i] <- countbyyear$weights[y]
count$weighted[i] <- countbyyear$weights[y]*count[i,2]
count$check[i] <- count$weighted[i]/count$weight[i]
}
}
}
count
count$word <- rep(w, length(count$check))
length(count$check)
w
w <- "hate"
count$word <- rep(w, length(count$check))
grouping <- rbind(grouping, count)
grouping <- data.frame()
grouping <- rbind(grouping, count)
colnames(grouping) <- c("year", "unweighted", "weight", "weighted", "check", "word")
grouping
ggplot(grouping, aes(year, freq)) +
geom_line(aes(color=word),size=1.25) +
ylim(0,z) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Keyword appearance in song lyrics\nBillboard Year-End Hot 100 Songs 1964-2014"), x="", y="") +
theme(plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(),
axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(grouping, aes(year, weighted)) +
geom_line(aes(color=word),size=1.25) +
ylim(0,z) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Keyword appearance in song lyrics\nBillboard Year-End Hot 100 Songs 1964-2014"), x="", y="") +
theme(plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(),
axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
# The function `show_word_counts(x,z)` takes two parameters: the word(s) to look for and the y-limit for the output plot.
show_word_counts <- function(x,z) { # where x is words to check and z is the y-lim value
grouping <- data.frame()
# loop through the words provided as a list in x
for (w in x) {
freq <- sapply(gregexpr(keyword,allsongs$lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
keysongs <- cbind(allsongs, freq)
count <- aggregate(freq~year, data=keysongs, FUN=sum)
for (i in 1:length(count[,1])) { # account for missing years with a loop
# loop over each row in count
for ( y in 1:51 ) {
# compare to each row in countbyyear until we find the right year
if (count[i,1]==countbyyear[y,1]) {
# multiply by the appropriate weight
count$weight[i] <- countbyyear$weights[y]
count$weighted[i] <- countbyyear$weights[y]*count[i,2]
count$check[i] <- count$weighted[i]/count$weight[i]
}
}
}
count$word <- rep(w, length(count$check))
grouping <- rbind(grouping, count)
}
colnames(grouping) <- c("year", "unweighted", "weight", "weighted", "check", "word")
# make the plot
ggplot(grouping, aes(year, weighted)) +
geom_line(aes(color=word),size=1.25) +
ylim(0,z) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Keyword appearance in song lyrics\nBillboard Year-End Hot 100 Songs 1964-2014"), x="", y="") +
theme(plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(),
axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
show_word_counts("hate", 25)
show_word_counts("hate", 250)
show_word_counts(c("ass", "hell", "bitch","fuck","damn","nigga","shit"), 100)
show_word_counts(c("ass", "hell", "bitch","fuck","damn","nigga","shit"), 1000)
show_word_counts(c("heart", "love"), 1000)
x <- c("hate", "hurt")
for (w in x) {
freq <- sapply(gregexpr(keyword,allsongs$lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
keysongs <- cbind(allsongs, freq)
count <- aggregate(freq~year, data=keysongs, FUN=sum)
for (i in 1:length(count[,1])) { # account for missing years with a loop
# loop over each row in count
for ( y in 1:51 ) {
# compare to each row in countbyyear until we find the right year
if (count[i,1]==countbyyear[y,1]) {
# multiply by the appropriate weight
count$weight[i] <- countbyyear$weights[y]
count$weighted[i] <- countbyyear$weights[y]*count[i,2]
count$check[i] <- count$weighted[i]/count$weight[i]
}
}
}
count$word <- rep(w, length(count$check))
grouping <- rbind(grouping, count)
}
colnames(grouping) <- c("year", "unweighted", "weight", "weighted", "check", "word")
# make the plot
ggplot(grouping, aes(year, weighted)) +
geom_line(aes(color=word),size=1.25) +
ylim(0,z) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Keyword appearance in song lyrics\nBillboard Year-End Hot 100 Songs 1964-2014"), x="", y="") +
theme(plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(),
axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
freq <- sapply(gregexpr(c("hate","hurt"), allsongs$lyrics), function(x) if(x[[1]]!=-1) { length(x) } else {0})
show_word_counts("ass", 200)
show_word_counts("hell", 200)
show_word_counts("bitch", 200)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
keysongs
View(keysongs)
source('~/R/kw_musiclyrics/Song-Lyric-Freq.R')
source('~/R/kw_musiclyrics/Song-Lyric-Freq.R')
allsongs <- read.csv("wikisongs.csv", stringsAsFactors=FALSE) ## written in step 2
source('~/R/kw_musiclyrics/Song-Lyric-Freq.R')
head(allsongs$year)
head(keysongs)
keysongs <- cbind(as.numeric(year), as.numeric(freq), word)
head(keysongs)
source('~/.active-rstudio-document')
keysongs <- as.data.frame(cbind(year, freq, word))
keysongs <- as.data.frame(cbind(year, freq, word), stringsAsFactors=FALSE)
source('~/.active-rstudio-document')
keysongs$freq <- as.numeric(keysongs$freq)
tail(keysongs)
str(keysongs)
summary(keysongs)
sum(keysongs$freq)
combo <- aggregate(freq~year, data=keysongs, FUN=sum)
combo
source('~/.active-rstudio-document')
length(keywords)
keywords[1]
keywords[2]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,500) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
head(alltogether)
head(keysongs)
source('~/.active-rstudio-document')
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,500) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
head(alltogether)
head(keysongs)
source('~/.active-rstudio-document')
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,500) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,500) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
for ( i in 1:length(allsongs$lyrics) ) {
y<-strsplit(allsongs[i, ]$lyrics, " ") # split each lyric entry into words
allsongs$wordcount[i] <- length(y[[1]]) # count the words
}
wordcount <- aggregate(wordcount~year, data=allsongs, FUN=sum)
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
keysongs$freq <- as.numeric(keysongs$freq)
keysongs$rate <- keysongs$freq/keysongs$V4
keysongs$V4 <- as.numeric(keysongs$V4)
keysongs$freq <- as.numeric(keysongs$freq)
keysongs$rate <- keysongs$freq/keysongs$V4
head(keysongs)
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
source('~/.active-rstudio-document')
ggplot(alltogether, aes(year, rate)) + geom_line(aes(color=word), size=1.25) + ylim(0,500) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(alltogether, aes(year, rate)) + geom_line(aes(color=word), size=1.25) + ylim(0,100) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
keysongs$V4 <- as.numeric(keysongs$V4)
keysongs$freq <- as.numeric(keysongs$freq)
keysongs$rate <- keysongs$freq/keysongs$V4
combo <- aggregate(rate~year+word, data=keysongs, FUN=sum)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- combo$freq/wordcount$wordcount
alltogether <- rbind(alltogether, combo)
alltogether <- data.frame()
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
ggplot(alltogether, aes(year, rate)) + geom_line(aes(color=word), size=1.25) + ylim(0,100) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(alltogether, aes(year, rate)) + geom_line(aes(color=word), size=1.25) + ylim(0,1) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
source('~/.active-rstudio-document')
ggplot(alltogether, aes(year, rate)) + geom_line(aes(color=word), size=1.25) + ylim(0,1) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
warnings()
source('~/.active-rstudio-document')
ggplot(alltogether, aes(year, rate)) + geom_line(aes(color=word), size=1.25) + ylim(0,1) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(alltogether, aes(year, rate)) + geom_line(aes(color=word), size=1.25) + ylim(0,0.25) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
summary(alltogether)
ggplot(alltogether, aes(year, rate)) + geom_line(aes(color=word), size=1.25) + ylim(0,0.025) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(alltogether, aes(year, rate)) + geom_line(aes(color=word), size=1.25) + ylim(0,0.03) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
source('~/.active-rstudio-document')
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,0.03) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
summary(alltogether)
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,550) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,600) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
for (i in 1:length(allsongs$lyrics)) {
allsongs$wordcount[i] <- length(strsplit(allsongs$lyrics[i], " ")[[1]])
}
countbyyear <- aggregate(wordcount~year,data=allsongs, FUN=mean)
source('~/.active-rstudio-document')
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,.05) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,.1) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,1) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
alltogether
wordcount$wordcount
m <- wordcount$wordcount/10000
m
combo$rate <- combo$freq/m
combo$rate
source('~/.active-rstudio-document')
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,50) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,100) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
combo$rate <- combo$freq/wordcount$wordcount
source('~/.active-rstudio-document')
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,100) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
show_word_counts(c("ass", "hell", "bitch","fuck","damn","nigga","shit"), 200)
i <- 1999
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
head(x)
y <- str_split_fixed(x,"\n",3)
head(y)
w <- as.data.frame(y, stringsAsFactors=FALSE)
colnames(w) <- c("rank","songnames","artists")
w$year <- rep(i,length(w$rank))
allthesongs <- rbind(allthesongs,w)
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- y[,3]
w$year <- rep(i,length(w$rank))
wyear <- cbind(w, rep(i,length(w)))
as.data.frame(wyear, stringsAsFactors=FALSE)
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
billboard_artists <- split_billboard_text[,3]
billboard_artists
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
billboard_artists <- split_billboard_text[,3]
billboard_artists <- cbind(billboard_artists, rep(i,length(billboard_artists)))
billboard_artists <- as.data.frame(cbind(billboard_artists, rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
billboard_artists <- split_billboard_text[,3]
billboard_artists <- as.data.frame(cbind(billboard_artists, rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
colnames(allthesongs) <- c("artists", "year")
allthesongs <- rbind(allthesongs,billboard_artists)
allthesongs <- data.frame()
allthesongs <- rbind(allthesongs,billboard_artists)
colnames(allthesongs) <- c("artists", "year")
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat",allthesongs$artists),]
featbyyear <- aggregate(songnames~year,data=feat, FUN=length)
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
ggplot(featbyyear, aes(as.factor(year), artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Songs\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
head(allsongs$artists)
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat",allsongs$artists),]
