w$year <- rep(i,100) # add the year in a new column
allthesongs <- rbind(allthesongs,w) # row bind this year's data to the df }
allthesongs <- data.frame() # create an empty data frame
# loop through wikipedia entries to collect top 100 songs from 1964-2014
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE) # parse html
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3) # split table into three chunks: rank, song and artist
w <- as.data.frame(y, stringsAsFactors=FALSE) # turn into a data frame
w <- w[2:101, ] # remove the header
colnames(w) <- c("rank","songnames","artists") # add column names
w$songnames <- gsub('\\"|\\\n|\\,|\\!|\\?|\\+|\\(|\\)|\\#','',w$songnames) # remove etc. characters from the song names
w$songnames <- gsub("\\.|/|\\'"," ",w$songnames)
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists) # remove etc. characters from artist names
w$artists <- gsub("\\.|/|\\'"," ",w$artists) # replace periods, slashes and apostrophes with spaces
w$year <- rep(i,100) # add the year in a new column
allthesongs <- rbind(allthesongs,w) # row bind this year's data to the df }
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
}
ad;ljfasdlfk
;
end
>
source('~/.active-rstudio-document')
summary(w)
feat <- allthesongs[grep("featuring|duet",allthesongs$artists),]
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet",allthesongs$artists),]
and <- allthesongs[grep("and|&", allthesongs$artists),]
and$artists
and <- allthesongs[grep(" and |&", allthesongs$artists),]
and$artists
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat",allthesongs$artists),]
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
featbyyear
library("ggplot")
library("ggplot2")
gglot(aes(featbyyear$year,featbyyear$artists)) + geom_line()
ggplot(aes(featbyyear$year,featbyyear$artists)) + geom_line()
ggplot(aes(year,artists, data=featbyyear)) + geom_line()
ggplot(featbyyear, aes(yeat,artists)) + geom_line()
ggplot(featbyyear, aes(year,artists)) + geom_line()
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs featuring 2+ artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
andbyyear <- aggregate(artists~year,data=and, FUN=length)
ggplot(andbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs featuring 2+ artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
and <- allthesongs[grep(" and |&", allthesongs$artists),]
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and|&",allthesongs$artists),]
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and|&",allthesongs$artists),]
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs featuring 2+ artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and",allthesongs$artists),]
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs featuring 2+ artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
source('~/.active-rstudio-document')
library("XML")
source('~/.active-rstudio-document')
source('~/Desktop/Fifty Years of Movies/analyze_data_movie_synopses.R')
library("ggplot2")
ggplot(grouping, aes(year, count)) +geom_line(aes(color=word),size=1.25) + ylim(0,25) + scale_color_brewer(palette="Paired") + labs(title=paste("Top 100 Highest Grossing Films\nsynospes containing certain words"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white')) + stat_smooth(method="loess")
years <- 1964:2014
topworddf <- data.frame(1:50)
for (i in years) {
first <- allmovies[year==i,]
m <- first$lyrics
m <- unlist(m)
m <- strsplit(m, " ")
m <- unlist(m)
w <- table(m)
wsort <- sort(w,decreasing=TRUE)
topwords <- wsort
x <- data.frame(topwords)
x$names <- rownames(x)
x$year <- rep(i, 1)
x <- x[1:50,]
topworddf <- cbind(topworddf,x)
}
years <- 1964:2014
topworddf <- data.frame(1:50)
for (i in years) {
first <- allmovies[allmovies$year==i,]
m <- first$lyrics
m <- unlist(m)
m <- strsplit(m, " ")
m <- unlist(m)
w <- table(m)
wsort <- sort(w,decreasing=TRUE)
topwords <- wsort
x <- data.frame(topwords)
x$names <- rownames(x)
x$year <- rep(i, 1)
x <- x[1:50,]
topworddf <- cbind(topworddf,x)
}
for (i in years) {
first <- allmovies[allmovies$year==i,]
m <- first$synopsis
m <- unlist(m)
m <- strsplit(m, " ")
m <- unlist(m)
w <- table(m)
wsort <- sort(w,decreasing=TRUE)
topwords <- wsort
x <- data.frame(topwords)
x$names <- rownames(x)
x$year <- rep(i, 1)
x <- x[1:50,]
topworddf <- cbind(topworddf,x)
}
View(x)
head(topworddf)
write.csv(topworddf, "test_freqwords.csv")
getwd()
getwd)
getwd()
install.packages("rmarkdown")
head(x)
head(y)
allsongs <- read.csv("Users/kaylinwalker/Desktop/Fifty Years of Top 100 Singles Song Lyrics/wikisongs.csv", stringsAsFactors=FALSE)
for ( i in 1:length(allsongs$lyrics) ) {
y<-strsplit(allsongs[i, ]$lyrics, " ") # split each lyric entry into words
allsongs$wordcount[i] <- length(y[[1]]) # count the words
}
allsongs <- read.csv("/Users/kaylinwalker/Desktop/Fifty Years of Top 100 Singles Song Lyrics/wikisongs.csv", stringsAsFactors=FALSE)
for ( i in 1:length(allsongs$lyrics) ) {
y<-strsplit(allsongs[i, ]$lyrics, " ") # split each lyric entry into words
allsongs$wordcount[i] <- length(y[[1]]) # count the words
}
warnings()
allsongs[3,]$lyrics
strsplit(allsongs[3,]$lyrics, " ")
for ( i in 1:length(allsongs$lyrics) ) {
y<-strsplit(allsongs$lyrics[i], " ") # split each lyric entry into words
allsongs$wordcount[i] <- length(y[[1]]) # count the words
}
warnings()
?strsplit
?function
()
:
source('~/.active-rstudio-document')
show_word_counts("love")
countbyyear <- aggregate(wordcount~year,data=m, FUN=sum) # add up all word counts per year
countbyyear$persong <- countbyyear$wordcount/100 # calculate the average word count per song (each year has 100 songs)
countbyyear$weights <- mean(countbyyear$persong)/countbyyear$persong
for ( i in 1:length(allsongs$lyrics) ) {
y<-strsplit(allsongs[i, ]$lyrics, " ") # split each lyric entry into words
allsongs$wordcount[i] <- length(y[[1]]) # count the words
}
countbyyear <- aggregate(wordcount~year,data=m, FUN=sum) # add up all word counts per year
countbyyear$persong <- countbyyear$wordcount/100 # calculate the average word count per song (each year has 100 songs)
countbyyear$weights <- mean(countbyyear$persong)/countbyyear$persong # divide the average length by each year's avg length to weight appropriately
for ( i in 1:length(allsongs$lyrics) ) {
y<-strsplit(allsongs[i, ]$lyrics, " ") # split each lyric entry into words
allsongs$wordcount[i] <- length(y[[1]]) # count the words
}
countbyyear <- aggregate(wordcount~year,data=m, FUN=sum)
countbyyear <- aggregate(wordcount~year,data=allsongs, FUN=sum)
head(countbyyear)
show_word_counts("love")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
show_word_counts("love")
library("ggplot2")
show_word_counts("love")
allsongs$lyrics[47]
allsongs$lyrics[33]
allsongs$lyrics[90]
allsongs$lyrics[133]
allsongs$lyrics[256]
allsongs$lyrics[265]
countbyyear <- aggregate(wordcount~year,data=allsongs, FUN=mean)
pieces <- gsub(" {2,}", " ", allsongs$lyrics)
pieces <- gsub(" {2,}", " ", allsongs$lyrics[3,])
pieces <- gsub(" {2,}", " ", allsongs$lyrics[3])
pieces <- strsplit(pieces, " ")
length(pieces[[1]])
warnings()
show_word_counts("love")
show_word_counts <- function(x) {
grouping <- data.frame()
for (w in x) { # loop through those words
thesesongs <- allsongs[grep(w,allsongs$lyrics), ] # subset out songs with lyrics containing the word
count <- aggregate(thesesongs$rank~thesesongs$year, FUN=length) # count how many songs there are
for (i in 1:length(count[,1])) { # account for missing years with a loop
# loop over each row in count
for ( y in 1:51 ) {
# compare to each row in countbyyear until we find the right year
if (count[i,1]==countbyyear[y,1]) { #countbyyear created in step 3
# multiply by the appropriate weight
count$weight[i] <- countbyyear$weights[y]
count$weighted[i] <- countbyyear$weights[y]*count[i,2]
count$check[i] <- count$weighted[i]/count$weight[i]
}
}
}
count$word <- rep(w, length(count$check))
grouping <- rbind(grouping, count)
}
colnames(grouping) <- c("year", "unweighted", "weight", "weighted", "check", "word")
# make the plot
ggplot(grouping, aes(year, weighted)) + geom_line(aes(color=word),size=1.25) + ylim(0,100) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing certain words"), x="", y="") +
theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
show_word_counts("love")
grouping <- data.frame()
count
grouping
thesesongs <- allsongs[grep("love",allsongs$lyrics), ]
head(thesesongs)
names(thesesongs)
count <- aggregate(thesesongs$rank~thesesongs$year, FUN=length)
names(count)
head(count)
countbyyear$weights[3]
theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
for (i in 1:length(allsongs$lyrics)) {
allsongs$wordcount[i] <- length(strsplit(allsongs$lyrics[i], " ")[[1]])
}
countbyyear <- aggregate(wordcount~year,data=allsongs, FUN=mean)
```{r keyword_function}
show_word_counts <- function(x) {
grouping <- data.frame()
words <- x
for (w in words) { # loop through those words
thesesongs <- allsongs[grep(w,allsongs$lyrics), ] # subset out songs with lyrics containing the word
count <- aggregate(thesesongs$rank~thesesongs$year, FUN=length) # count how many songs there are
for (i in 1:length(count[,1])) { # account for missing years with a loop
# loop over each row in count
for ( y in 1:51 ) {
# compare to each row in countbyyear until we find the right year
if (count[i,1]==countbyyear[y,1]) { #countbyyear created in step 3
# multiply by the appropriate weight
count$weight[i] <- countbyyear$wordcount[y]
count$weighted[i] <- countbyyear$wordcount[y]*count[i,2]
count$check[i] <- count$weighted[i]/count$weight[i]
}
}
}
count$word <- rep(w, length(count$check))
grouping <- rbind(grouping, count)
}
colnames(grouping) <- c("year", "unweighted", "weight", "weighted", "check", "word")
# make the plot
ggplot(grouping, aes(year, weighted)) + geom_line(aes(color=word),size=1.25) + ylim(0,100) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing certain words"), x="", y="") +
theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
show_word_counts("love")
head(grouping)
x<-"love"
grouping <- data.frame()
words <- x
for (w in words) { # loop through those words
thesesongs <- allsongs[grep(w,allsongs$lyrics), ] # subset out songs with lyrics containing the word
count <- aggregate(thesesongs$rank~thesesongs$year, FUN=length) # count how many songs there are
for (i in 1:length(count[,1])) { # account for missing years with a loop
# loop over each row in count
for ( y in 1:51 ) {
# compare to each row in countbyyear until we find the right year
if (count[i,1]==countbyyear[y,1]) { #countbyyear created in step 3
# multiply by the appropriate weight
count$weight[i] <- countbyyear$wordcount[y]
count$weighted[i] <- countbyyear$wordcount[y]*count[i,2]
count$check[i] <- count$weighted[i]/count$weight[i]
}
}
}
count$word <- rep(w, length(count$check))
grouping <- rbind(grouping, count)
}
colnames(grouping) <- c("year", "unweighted", "weight", "weighted", "check", "word")
# make the plot
ggplot(grouping, aes(year, weighted)) + geom_line(aes(color=word),size=1.25) + ylim(0,100) +
scale_color_brewer(palette="Paired") +
labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing certain words"), x="", y="") +
theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
for (i in 1:length(allsongs$lyrics)) {
allsongs$wordcount[i] <- length(strsplit(allsongs$lyrics[i], " ")[[1]])
}
countbyyear <- aggregate(wordcount~year,data=allsongs, FUN=mean)
countbyyear$weights <- mean(countbyyear$wordcount)/countbyyear$wordcount
# make a nice plot of this data
ggplot(countbyyear, aes(year, wordcount)) + geom_line(aes(color="persong"),size=1.25) + labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,500)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
allsongs <- read.csv("/Users/kaylinwalker/R/kw_musiclyrics/wikisongs.csv", stringsAsFactors=FALSE)
for (i in 1:length(allsongs$lyrics)) {
allsongs$wordcount[i] <- length(strsplit(allsongs$lyrics[i], " ")[[1]])
}
countbyyear <- aggregate(wordcount~year,data=allsongs, FUN=mean)
countbyyear
?opts_chunk
allsongs <- read.csv("wikisongs.csv", stringsAsFactors=FALSE)
feat <- allsongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and",allsongs$artists),]
feat$artists
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
library("ggplot2")
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
for (i in 1:length(allsongs$lyrics)) {
allsongs$wordcount[i] <- length(strsplit(allsongs$lyrics[i], " ")[[1]])
}
countbyyear <- aggregate(wordcount~year,data=allsongs, FUN=mean)
countbyyear$weights <- mean(countbyyear$wordcount)/countbyyear$wordcount
# make a nice plot of this data
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,500)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2),
axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
######### featuring #####
allthesongs <- data.frame()
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[2:101, ]
colnames(w) <- c("rank","songnames","artists")
w$songnames <- gsub('\\"|\\\n|\\,|\\!|\\?|\\+|\\(|\\)|\\#','',w$songnames)
w$songnames <- gsub("\\.|/|\\'"," ",w$songnames)
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$artists <- gsub("\\.|/|\\'"," ",w$artists)
w$artists <- str_split_fixed(w$artists, " [Ff]eaturing| [Dd]uet", 2)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and",allthesongs$artists),]
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
URL <_ "http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_1995"
URL <- "http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_1995"
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
?xpathSApply
??xpathSApply
library("XML")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
length(x)
x[[3]]
y <- str_split_fixed(x,"\n",3)
library("stringr")
y <- str_split_fixed(x,"\n",3)
head(y)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[2:101, ]
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
head(w)
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
head(w)
w$artists <- str_split_fixed(w$artists, " [Ff]eaturing| [Dd]uet", 2)
for (i in 1:length(allsongs$lyrics)) {
allsongs$wordcount[i] <- length(strsplit(allsongs$lyrics[i], " ")[[1]])
}
countbyyear <- aggregate(wordcount~year,data=allsongs, FUN=mean)
countbyyear$weights <- mean(countbyyear$wordcount)/countbyyear$wordcount
# make a nice plot of this data
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,500)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2),
axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
######### featuring #####
allthesongs <- data.frame()
library("XML")
library("stringr")
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and",allthesongs$artists),]
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
featbyyear
library("XML")
library("stringr")
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,101)
allthesongs <- rbind(allthesongs,w)
}
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[2:101, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
head(feat)
head(allthesongs)
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and",allthesongs$artists),]
head(feat)
head(featbyyear)
featbyyear
str(feat)
summary(feat)
feat$year
featbyyear <- aggregate(songnames~year,data=feat, FUN=length)
featbyyear <- aggregate(songnames~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(featbyyear, aes(year, songnames)) + geom_line(aes(color="songnames"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
featbyyear
feat
head(feat, n=20)
head(feat, n=64)
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat",allthesongs$artists),]
featbyyear <- aggregate(songnames~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, songnames)) + geom_line(aes(color="songnames"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
par(mfrow=c(2,1))
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
}
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,500)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2),
axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,500)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2),
axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
library("gridExtra")
require("gridExtra")
install.packages("gridExtra")
?grep
cobberlife <- read.csv("smb://wingroup.cord.edu/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife <- read.csv("VOL/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife <- read.csv("COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife <- read.csv("/Volumes/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife$Date <- as.Date(cobberlife$Date, format="%m/%d/%y")
cobberlifeclicks <- aggregate(Unique.Clicks~Link+Date+Audience+Total.Email.Clicks, cobberlife, sum)
cobberlifeclicks
cobberlifeclicks <- aggregate(Unique.Clicks~Link, cobberlife, sum)
cobberlifeclicks
cobberlifeclicks <- cobberlifeclicks[order(cobberlifeclicks$Unique.Clicks), ]
cobberlifeclicks <- cobberlifeclicks[order(-cobberlifeclicks$Unique.Clicks), ]
head(cobberlifeclicks)
setwd("/Users/kaylinwalker/R/kw_musiclyrics")
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
if (!require('RWordPress'))
install.packages('RWordPress', repos = 'http://www.omegahat.org/R', type = 'source')
library(RWordPress)
options(WordpressLogin = c(user = 'mn28kwlk'),
WordpressURL = 'http://www.kaylinwalker.com/')
library(knitr)
setwd("/Users/kaylinwalker/R/kw_musiclyrics")
knit2wp('SongScrape.Rmd', title = 'Scraping Song Data From the Web')
knit2wp('Song-Scrape.Rmd', title = 'Scraping Song Data From the Web')
options(WordpressLogin = c(walkerkq = 'mn28kwlk'),
WordpressURL = 'http://www.kaylinwalker.com/')
knit2wp('Song-Scrape.Rmd', title = 'Scraping Song Data From the Web')
options(WordpressLogin = c(walkerkq = 'mn28kwlk'),
WordpressURL = 'http://www.kaylinwalker.com/wp-admin')
knit2wp('Song-Scrape.Rmd', title = 'Scraping Song Data From the Web')
