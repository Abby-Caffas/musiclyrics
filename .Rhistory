geom_line(aes(color="persong"),size=1.25) +
labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,500)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2),
axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
######### featuring #####
allthesongs <- data.frame()
library("XML")
library("stringr")
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and",allthesongs$artists),]
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
featbyyear
library("XML")
library("stringr")
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,101)
allthesongs <- rbind(allthesongs,w)
}
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[2:101, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
head(feat)
head(allthesongs)
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and",allthesongs$artists),]
head(feat)
head(featbyyear)
featbyyear
str(feat)
summary(feat)
feat$year
featbyyear <- aggregate(songnames~year,data=feat, FUN=length)
featbyyear <- aggregate(songnames~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(featbyyear, aes(year, songnames)) + geom_line(aes(color="songnames"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
featbyyear
feat
head(feat, n=20)
head(feat, n=64)
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat",allthesongs$artists),]
featbyyear <- aggregate(songnames~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, songnames)) + geom_line(aes(color="songnames"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
par(mfrow=c(2,1))
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
}
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,500)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2),
axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,500)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2),
axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
library("gridExtra")
require("gridExtra")
install.packages("gridExtra")
?grep
cobberlife <- read.csv("smb://wingroup.cord.edu/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife <- read.csv("VOL/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife <- read.csv("COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife <- read.csv("/Volumes/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife$Date <- as.Date(cobberlife$Date, format="%m/%d/%y")
cobberlifeclicks <- aggregate(Unique.Clicks~Link+Date+Audience+Total.Email.Clicks, cobberlife, sum)
cobberlifeclicks
cobberlifeclicks <- aggregate(Unique.Clicks~Link, cobberlife, sum)
cobberlifeclicks
cobberlifeclicks <- cobberlifeclicks[order(cobberlifeclicks$Unique.Clicks), ]
cobberlifeclicks <- cobberlifeclicks[order(-cobberlifeclicks$Unique.Clicks), ]
head(cobberlifeclicks)
library("XML")
library("stringr")
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# put artist names into a data frame along with the year it is from
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,100)), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs, billboard)
}
colnames(allthesongs) <- c("Rank", "Song", "Artist", "Year")
allthesongs$Song <- gsub("[^[:alnum:] ]", "", allthesongs$Song)
allthesongs$Artist <- gsub("& ", "", allthesongs$Artist)
# fix accents
allthesongs$Artist <- gsub("è|Ã|é", "e", allthesongs$Artist)
allthesongs$Artist <- gsub("ý", "y", allthesongs$Artist)
allthesongs$Artist <- gsub("ó|ō|ö", "o", allthesongs$Artist)
allthesongs$Artist <- gsub("ü", "u", allthesongs$Artist)
allthesongs$Artist <- gsub("-", " ", allthesongs$Artist)
allthesongs$Artist <- gsub("[^[:alnum:] ]", "", allthesongs$Artist)
# fix a few troublesome artists
allthesongs$Artist <- gsub("Olivia Newton John", "Olivia NewtonJohn", allthesongs$Artist)
allthesongs$Artist <- gsub("Ne Yo", "NeYo", allthesongs$Artist)
allthesongs$Artist <- gsub("Jay Z", "JayZ", allthesongs$Artist)
allthesongs$Artist <- gsub("N Sync", "Nsync", allthesongs$Artist)
allthesongs$Artist <- gsub("Daryl Hall John Oates", "Hall Oates", allthesongs$Artist)
for (s in 2701:4000)  {
#for (s in 1:length(allthesongs$Song))  {
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
break
}
}
}) # end tryCatch
}
} # end for
for (s in 2701:4000)  {
#for (s in 1:length(allthesongs$Song))  {
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
break
}
}
}) # end tryCatch
}
} # end for
s <- 1
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
break
}
}
}) # end tryCatch
}
} # end for
for (s in 2701:4000)  {
#for (s in 1:length(allthesongs$Song))  {
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
break
}
}
}) # end tryCatch
}
} # end for
allthesongs[2753:2755,]
s <- 2753
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
break
}
}
}) # end tryCatch
}
for (s in 2701:4000)  {
}
for (s in 2701:4000)  {
#for (s in 1:length(allthesongs$Song))  {
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
break
}
}
}) # end tryCatch
}
} # end for
write.csv(allthesongs[2700:4000,], "middlechunk.csv", row.names=FALSE)
for (s in 4001:5100)  {
#for (s in 1:length(allthesongs$Song))  {
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
break
}
}
}) # end tryCatch
}
} # end for
write.csv(allthesongs[4001:5000,], "endchunk.csv", row.names=FALSE)
bottom <- read.csv("endchunk.csv", stringsAsFactors=FALSE)
rest <- read.csv("allthesongs.csv", stringsAsFactors=FALSE)
head(rest)
tail(bottom)
rest <- rest[1:4000,]
allsongs <- rbind(rest, bottom)
tail(allthesongs$Year)
for (s in 5001:5100)  {
#for (s in 1:length(allthesongs$Song))  {
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
break
}
}
}) # end tryCatch
}
} # end for
resty <- allthesongs[5001:5100,]
rest <- read.csv("allthesongs.csv", stringsAsFactors=FALSE)
allsongs <- rbind(rest, resty)
rest <- rest[1:5000,]
allsongs <- rbind(rest, resty)
tail(allsongs)
write.csv(allsongs, "final_all_songs.csv", row.names=FALSE)
allthesongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
getwd()
setwd("/Users/kaylinwalker/R/kw_musiclyrics")
allthesongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
allthesongs$Lyrics[1]
?gsub
blank <- allthesongs$Lyrics[1]
gsub(blank, "", allthesongs$Lyrics)
blank <- allthesongs$Lyrics[1]
allthesongs$Lyrics <- gsub(blank, "", allthesongs$Lyrics)
allthesongs$Lyrics <- gsub("\\\n|\\\t"," ",allthesongs$Lyrics)
allthesongs$Lyrics <- tolower(gsub("[^[:alnum:] ]", "", allthesongs$Lyrics))
nolyrics <- allthesongs[allthesongs$Lyrics=="", ]
296/5100
blank
blank <- gsub("\\\n|\\\t"," ",blank)
blank <- tolower(gsub("[^[:alnum:] ]", "", blank))
blank
nolyrics <- allthesongs[allthesongs$Lyrics==" oh yeah ill tell you something i think youll understand when i say that something i wanna hold your handi wanna hold your hand i wanna hold your handoh please say to me youll let me be your man and please say to me youll let me hold your handnow let me hold your hand i wanna hold your handand when i touch you i feel happy inside its such a feeling that my love i cant hide i cant hide i cant hideyeah you got that something i think youll understand when i say that something i wanna hold your handi wanna hold your hand i wanna hold your handand when i touch you i feel happy inside its such a feeling that my love i cant hide i cant hide i cant hideyeah you got that something i think youll understand when i feel that something i wanna hold your handi wanna hold your hand i wanna hold your hand i wanna hold your hand "]
allthesongs[5100,]
write.csv(allthesongs, "final_all_songs2.csv", row.names=FALSE)
library("knitr")
library("XML")
library("ggplot2")
library("stringr")
library("gridExtra")
opts_chunk$set(echo=FALSE, warning=FALSE, fig.height=4)
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
allthesongs <- data.frame()
for ( i in 1:length(allsongs$lyrics) ) {
y<-strsplit(allsongs[i, ]$lyrics, " ")
allsongs$wordcount[i] <- length(y[[1]])
}
wordcount <- aggregate(wordcount~year, data=allsongs, FUN=sum)
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
allthesongs <- data.frame()
for ( i in 1:length(allsongs$lyrics) ) {
y<-strsplit(allsongs[i, ]$lyrics, " ")
allsongs$wordcount[i] <- length(y[[1]])
}
wordcount <- aggregate(wordcount~year, data=allsongs, FUN=sum)
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
allthesongs <- data.frame()
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
allthesongs <- data.frame()
for ( i in 1:length(allsongs$Lyrics) ) {
y<-strsplit(allsongs[i, ]$Lyrics, " ")
allsongs$wordcount[i] <- length(y[[1]])
}
wordcount <- aggregate(wordcount~year, data=allsongs, FUN=sum)
library("knitr")
library("XML")
library("ggplot2")
library("stringr")
library("gridExtra")
opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, cache=TRUE, fig.height=4)
# The function `show_word_counts(x,z)` takes two parameters: the word(s) to look for and the y-limit for the output plot.
show_word_counts <- function(y,z) { # where x is words to check and z is the y-lim value
alltogether <- data.frame()
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$year
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
keysongs$V4 <- as.numeric(keysongs$V4)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,z) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
library("knitr")
library("XML")
library("ggplot2")
library("stringr")
library("gridExtra")
opts_chunk$set(echo=FALSE, warning=FALSE, fig.height=4)
library("ggplot2")
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
for ( i in 1:length(allsongs$Lyrics) ) {
allsongs$wordcount[i] <- length( strsplit(allsongs$Lyrics[i], " ")[[1]] )
}
countbyyear <- aggregate(wordcount ~ Year, data = allsongs, FUN = mean)
ggplot(countbyyear, aes(Year, wordcount)) + geom_line(aes(color="persong"),size=1.25) + labs(title="Average Number of Words Per Song\n in Billboard Year-End Hot 100 Songs\n 1964-2014", x="",y="") + coord_cartesian(ylim=c(0,500)) + theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
feat <- allsongs[grep("[Ff]eaturing|[Ff]eat|[Dd]uet|[Ww]ith", allsongs$artists), ]
featbyyear <- aggregate(artists ~ year, data = feat, FUN = length)
feat <- allsongs[grep("[Ff]eaturing|[Ff]eat|[Dd]uet|[Ww]ith", allsongs$Artist), ]
featbyyear <- aggregate(Artist ~ Year, data = feat, FUN = length)
ggplot(featbyyear, aes(as.numeric(Year), Artist)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists in Billboard Year-End Hot 100 Songs\n 1964-2014", x="",y="") + coord_cartesian(ylim=c(0,100)) + theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
