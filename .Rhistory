x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
length(x)
x[[3]]
y <- str_split_fixed(x,"\n",3)
library("stringr")
y <- str_split_fixed(x,"\n",3)
head(y)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[2:101, ]
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
head(w)
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
head(w)
w$artists <- str_split_fixed(w$artists, " [Ff]eaturing| [Dd]uet", 2)
for (i in 1:length(allsongs$lyrics)) {
allsongs$wordcount[i] <- length(strsplit(allsongs$lyrics[i], " ")[[1]])
}
countbyyear <- aggregate(wordcount~year,data=allsongs, FUN=mean)
countbyyear$weights <- mean(countbyyear$wordcount)/countbyyear$wordcount
# make a nice plot of this data
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,500)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2),
axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
######### featuring #####
allthesongs <- data.frame()
library("XML")
library("stringr")
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and",allthesongs$artists),]
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
featbyyear
library("XML")
library("stringr")
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,101)
allthesongs <- rbind(allthesongs,w)
}
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[-1, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
for (i in 1964:2014) {
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
results <- htmlTreeParse(URL, useInternal=TRUE)
x <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
y <- str_split_fixed(x,"\n",3)
w <- as.data.frame(y, stringsAsFactors=FALSE)
w <- w[2:101, ]
colnames(w) <- c("rank","songnames","artists")
w$artists <- gsub('\\\n|\\,|\\?|\\+|\\(|\\)|\\#','',w$artists)
w$year <- rep(i,100)
allthesongs <- rbind(allthesongs,w)
}
head(feat)
head(allthesongs)
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat| and",allthesongs$artists),]
head(feat)
head(featbyyear)
featbyyear
str(feat)
summary(feat)
feat$year
featbyyear <- aggregate(songnames~year,data=feat, FUN=length)
featbyyear <- aggregate(songnames~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, artists)) + geom_line(aes(color="artists"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(featbyyear, aes(year, songnames)) + geom_line(aes(color="songnames"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
featbyyear
feat
head(feat, n=20)
head(feat, n=64)
feat <- allthesongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat",allthesongs$artists),]
featbyyear <- aggregate(songnames~year,data=feat, FUN=length)
ggplot(featbyyear, aes(year, songnames)) + geom_line(aes(color="songnames"),size=1.25) + labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") + coord_cartesian(ylim=c(0,50)) + theme(legend.position="none", plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
par(mfrow=c(2,1))
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
}
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,500)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2),
axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(countbyyear, aes(year, wordcount)) +
geom_line(aes(color="persong"),size=1.25) +
labs(title="Avg. Words Per Song\nin Billboard Year-End Hot 100 Singles\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,500)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2),
axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
library("gridExtra")
require("gridExtra")
install.packages("gridExtra")
?grep
getwd()
setwd("~/R/kw_musiclyrics/")
getwd()
songs <- read.csv("wikisongs.csv", stringsAsFactors=FALSE)
songs$artists <- gsub("\\n|\\t|\\,|\\.|\\&", "", songs$artists)
tail(songs$artists)
tail(songs$artists, n=30)
write.csv(songs, "wikisongs.csv")
# create an empty data frame
#allthesongs <- data.frame()
# for each year,
#for (i in 1964:2014) {
# create the URL for each year
#     URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
#     results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
#     billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
#     split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# keep only the third piece (the artist name)
#     billboard_artists <- split_billboard_text[,3]
# put artist names into a data frame along with the year it is from
#     billboard_artists <- as.data.frame(cbind(billboard_artists, rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
# row bind this year's data to all the data
#    allthesongs <- rbind(allthesongs,billboard_artists)
#}
# name the columns for ease of reference
#colnames(allthesongs) <- c("artists", "year")
# find all entries with words related to featuring in the aritst name
feat <- allsongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat",allsongs$artists),]
# aggregate by year
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
# make the plot
ggplot(featbyyear, aes(as.numeric(year), artists)) +
geom_line(aes(color="artists"),size=1.25) +
labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Songs\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,100)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
library("ggplot2")
# create an empty data frame
#allthesongs <- data.frame()
# for each year,
#for (i in 1964:2014) {
# create the URL for each year
#     URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
#     results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
#     billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
#     split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# keep only the third piece (the artist name)
#     billboard_artists <- split_billboard_text[,3]
# put artist names into a data frame along with the year it is from
#     billboard_artists <- as.data.frame(cbind(billboard_artists, rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
# row bind this year's data to all the data
#    allthesongs <- rbind(allthesongs,billboard_artists)
#}
# name the columns for ease of reference
#colnames(allthesongs) <- c("artists", "year")
# find all entries with words related to featuring in the aritst name
feat <- allsongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat",allsongs$artists),]
# aggregate by year
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
# make the plot
ggplot(featbyyear, aes(as.numeric(year), artists)) +
geom_line(aes(color="artists"),size=1.25) +
labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Songs\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,100)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
feat <- allsongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat",allsongs$artists),]
allsongs <- read.csv("wikisongs.csv", stringsAsFactors=FALSE)
feat <- allsongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat",allsongs$artists),]
feat <- allsongs[grep("[Ff]eaturing|[Dd]uet|[Ff]eat|[Ww]ith",allsongs$artists),]
featbyyear <- aggregate(artists~year,data=feat, FUN=length)
ggplot(featbyyear, aes(as.numeric(year), artists)) +
geom_line(aes(color="artists"),size=1.25) +
labs(title="Songs Featuring 2+ Artists\nin Billboard Year-End Hot 100 Songs\n1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,100)) +
theme(legend.position="none", plot.title = element_text(size=14, face="bold", vjust=2), axis.ticks.y = element_blank(), panel.background = element_rect(fill = 'white'))
ggplot(featbyyear, aes(as.numeric(year), artists)) +
geom_line(aes(color="artists"),size=1.25) +
labs(title="Songs Featuring 2+ Artists\n in Billboard Year-End Hot 100 Songs\n 1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,100)) + theme_invisible()
ggplot(featbyyear, aes(as.numeric(year), artists)) +
geom_line(aes(color="artists"),size=1.25) +
labs(title="Songs Featuring 2+ Artists\n in Billboard Year-End Hot 100 Songs\n 1964-2014", x="",y="") +
coord_cartesian(ylim=c(0,100)) + theme_grey()
summary(featbyyear)
head(featbyyear)
head(countbyyear)
for ( i in 1:length(allsongs$lyrics) ) {
allsongs$wordcount[i] <- length( strsplit(allsongs$lyrics[i], " ")[[1]] )
}
countbyyear <- aggregate(wordcount ~ year, data = allsongs, FUN = mean)
head(countbyyear)
max(allsongs$wordcount)
max <- allsongs[max(allsongs$wordcount),]
max
which(max(allsongs$wordcount))
with(max(allsongs$wordcount))
bylength <- allsongs[order(-allsongs$wordcount), ]
head(bylength)
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# keep only the third piece (the artist name)
billboard_artists <- split_billboard_text[,3]
# put artist names into a data frame along with the year it is from
billboard_artists <- as.data.frame(cbind(billboard_artists, rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs,billboard_artists)
}
library("XML")
library("stringr")
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# keep only the third piece (the artist name)
billboard_artists <- split_billboard_text[,3]
# put artist names into a data frame along with the year it is from
billboard_artists <- as.data.frame(cbind(billboard_artists, rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs,billboard_artists)
}
billboard_artists
billboard_artists[-1,]
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# keep only the third piece (the artist name)
billboard_artists <- split_billboard_text[,3]
# put artist names into a data frame along with the year it is from
billboard_artists <- as.data.frame(cbind(billboard_artists[-1,], rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs,billboard_artists)
}
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
head(split_billboard_text)
length(split_billboard_text)
length(split_billboard_text[,1])
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# keep only the third piece (the artist name)
billboard_artists <- split_billboard_text[2:101,3]
# put artist names into a data frame along with the year it is from
billboard_artists <- as.data.frame(cbind(billboard_artists[-1,], rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs,billboard_artists)
}
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# keep only the third piece (the artist name)
billboard_artists <- split_billboard_text[2:101,3]
# put artist names into a data frame along with the year it is from
billboard_artists <- as.data.frame(cbind(billboard_artists, rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs,billboard_artists)
}
head(allthesongs)
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# keep the song name
billboard_songs <- split_billboard_text[2:101, 2]
# keep the third piece (the artist name)
billboard_artists <- split_billboard_text[2:101, 3]
# put artist names into a data frame along with the year it is from
billboard_artists <- as.data.frame(cbind(billboard_songs, billboard_artists, rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs,billboard_artists)
}
head(allthesongs)
x<-as.data.frame(split_billboard_text, stringsAsFactors=FALSE)
head(x)
x<-as.data.frame(split_billboard_text, stringsAsFactors=FALSE, header=TRUE)
head)x
head(x)
x<-as.data.frame(split_billboard_text[2:101,], stringsAsFactors=FALSE)
head(x)
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,length(billboard_artists))), stringsAsFactors=FALSE)
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,100), stringsAsFactors=FALSE)
f}
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,100), stringsAsFactors=FALSE))
head(billboard)
colnames(allthesongs) <- c("Rank", "Song", "Artist", "Year")
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# put artist names into a data frame along with the year it is from
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,100), stringsAsFactors=FALSE))
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs, billboard)
}
colnames(allthesongs) <- c("Rank", "Song", "Artist", "Year")
allthesongs <- data.frame(stringsAsFactors=FALSE)
allthesongs <- data.frame(stringsAsFactors=FALSE)
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# put artist names into a data frame along with the year it is from
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,100), stringsAsFactors=FALSE))
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs, billboard)
}
colnames(allthesongs) <- c("Rank", "Song", "Artist", "Year")
allthesongs <- data.frame( ,stringsAsFactors=FALSE)
allthesongs <- data.frame("",stringsAsFactors=FALSE)
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# put artist names into a data frame along with the year it is from
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,100), stringsAsFactors=FALSE))
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs, billboard)
}
colnames(allthesongs) <- c("Rank", "Song", "Artist", "Year")
head(allthesongs)
allthesongs$Song <- gsub("[^[:alnum:] ]", "", allsongs$Song)
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# put artist names into a data frame along with the year it is from
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,100)), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs, billboard)
}
colnames(allthesongs) <- c("Rank", "Song", "Artist", "Year")
allthesongs$Song <- gsub("[^[:alnum:] ]", "", allsongs$Song)
allthesongs$Song <- gsub("[^[:alnum:] ]", "", allthesongs$Song)
allthesongs$Artist <- gsub("[^[:alnum:] ]", "", allthesongs$Artist)
head(allthesongs)
tail(allthesongs)
allthesongs[1000:1020]
allthesongs[1000:1020,]
allthesongs$SongURL <- gsub(" ", "-", allthesongs$Song)
allthesongs$ArtistURL <- gsub(" ", "-", allthesongs$Artist)
allthesongs$SongURL <- tolower(gsub(" ", "-", allthesongs$Song))
allthesongs$ArtistURL <- tolower(gsub(" ", "-", allthesongs$Artist))
allthesongs$ArtistURL[2]
allthesongs$ArtistURL[[2]]
s <- 4
URL2 <- paste("http://metrolyrics.com/",allthesongs$Song[z],"-lyrics-",allthesongs$Artist[z],".html",sep="")
URL2 <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",allthesongs$Artist[s],".html",sep="")
URL2
URL2 <- tolower(gsub(" ","-",URL2)) # change all spaces to hyphens
URL2
results <- htmlTreeParse(URL2, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, "//div[@id='lyrics-body-text']", xmlValue)
lyrics
lyrics <- gsub("\n|\t|","",lyrics) # clean up the text
lyrics
lyrics <- xpathSApply(results, "//div[@id='lyrics-body-text']", xmlValue)
lyrics <- gsub("\n|\t|"," ",lyrics) # clean up the text
lyrics
lyrics <- xpathSApply(results, "//div[@id='lyrics-body-text']", xmlValue)
lyrics <- gsub("\\\n|\\\t|"," ",lyrics) # clean up the text
lyrics
lyrics <- gsub("\\\n|\\\t"," ",lyrics) # clean up the text
lyrics <- xpathSApply(results, "//div[@id='lyrics-body-text']", xmlValue)
lyrics <- gsub("\\\n|\\\t"," ",lyrics) # clean up the text
lyrics
lyrics <- gsub("[^[:alnum:][:space:]']","",lyrics) # clean up the text
lyrics
lyrics <- tolower(lyrics)
allthesongs$lyrics[s] <- lyrics[1] # add to df
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# put artist names into a data frame along with the year it is from
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,100)), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs, billboard)
}
colnames(allthesongs) <- c("Rank", "Song", "Artist", "Year")
allthesongs$Song <- gsub("[^[:alnum:] ]", "", allthesongs$Song)
allthesongs$Artist <- gsub("[^[:alnum:] ]", "", allthesongs$Artist)
for (s in 1:length(allthesongs$Song)) {
URL2 <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",allthesongs$Artist[s],".html",sep="")
URL2 <- tolower(gsub(" ","-",URL2))
results <- htmlTreeParse(URL2, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, "//div[@id='lyrics-body-text']", xmlValue)
allthesongs$Lyrics[s] <- lyrics[1]
}
s <- 1
URL2 <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",allthesongs$Artist[s],".html",sep="")
URL2 <- tolower(gsub(" ","-",URL2))
URl2
URL2
