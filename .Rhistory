library("gridExtra")
require("gridExtra")
install.packages("gridExtra")
?grep
cobberlife <- read.csv("smb://wingroup.cord.edu/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife <- read.csv("VOL/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife <- read.csv("COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife <- read.csv("/Volumes/COM/_PROJECTS/WRITING/KAYLIN/Project Analysis/Reporting/Pardot Emails/CobberLife/CobberLife.Clicks.csv", stringsAsFactors=FALSE)
cobberlife$Date <- as.Date(cobberlife$Date, format="%m/%d/%y")
cobberlifeclicks <- aggregate(Unique.Clicks~Link+Date+Audience+Total.Email.Clicks, cobberlife, sum)
cobberlifeclicks
cobberlifeclicks <- aggregate(Unique.Clicks~Link, cobberlife, sum)
cobberlifeclicks
cobberlifeclicks <- cobberlifeclicks[order(cobberlifeclicks$Unique.Clicks), ]
cobberlifeclicks <- cobberlifeclicks[order(-cobberlifeclicks$Unique.Clicks), ]
head(cobberlifeclicks)
library("XML")
library("stringr")
allthesongs <- data.frame()
for (i in 1964:2014) {
# create the URL for each year
URL <- paste("http://en.wikipedia.org/wiki/Billboard_Year-End_Hot_100_singles_of_",i,sep="")
# parse the HTML
results <- htmlTreeParse(URL, useInternal=TRUE)
# pull out text from each table row
billboard_text <- xpathSApply(results, "//table[@class='wikitable sortable']//tr",xmlValue)
# split into three pieces (rank, song name and year)
split_billboard_text <- str_split_fixed(billboard_text,"\n",3)
# put artist names into a data frame along with the year it is from
billboard <- as.data.frame(cbind(split_billboard_text[2:101, ], rep(i,100)), stringsAsFactors=FALSE)
# row bind this year's data to all the data
allthesongs <- rbind(allthesongs, billboard)
}
colnames(allthesongs) <- c("Rank", "Song", "Artist", "Year")
allthesongs$Song <- gsub("[^[:alnum:] ]", "", allthesongs$Song)
allthesongs$Artist <- gsub("& ", "", allthesongs$Artist)
# fix accents
allthesongs$Artist <- gsub("è|Ã|é", "e", allthesongs$Artist)
allthesongs$Artist <- gsub("ý", "y", allthesongs$Artist)
allthesongs$Artist <- gsub("ó|ō|ö", "o", allthesongs$Artist)
allthesongs$Artist <- gsub("ü", "u", allthesongs$Artist)
allthesongs$Artist <- gsub("-", " ", allthesongs$Artist)
allthesongs$Artist <- gsub("[^[:alnum:] ]", "", allthesongs$Artist)
# fix a few troublesome artists
allthesongs$Artist <- gsub("Olivia Newton John", "Olivia NewtonJohn", allthesongs$Artist)
allthesongs$Artist <- gsub("Ne Yo", "NeYo", allthesongs$Artist)
allthesongs$Artist <- gsub("Jay Z", "JayZ", allthesongs$Artist)
allthesongs$Artist <- gsub("N Sync", "Nsync", allthesongs$Artist)
allthesongs$Artist <- gsub("Daryl Hall John Oates", "Hall Oates", allthesongs$Artist)
allthesongs$Lyrics <- ""
allthesongs$Source <- ""
#for (s in 1:length(allthesongs$Song))  {
for (s in 3001:4000) {
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
allthesongs$Source[s] <- b
break
}
}
}) # end tryCatch
}
} # end for
write.csv(allthesongs[3001:4000,], "just3-4000.csv", row.names=FALSE)
allthesongs$Lyrics <- ""
allthesongs$Source <- ""
#for (s in 1:length(allthesongs$Song))  {
for (s in 4001:5100) {
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
allthesongs$Source[s] <- b
break
}
}
}) # end tryCatch
}
} # end for
write.csv(allthesongs[3001:5100,], "just3-5100.csv", row.names=FALSE)
bottom <- allthesongs[3001:5100]
bottom <- allthesongs[3001:5100, ]
head(bottom)
tail(bottom)
bottom$Source
bottom <- allthesongs[4001:5100, ]
middle <- read.csv("just3-4000.csv", stringsAsFactors=FALSE)
top <- read.csv("3000.csv", stringsAsFactors=FALSE)
head(top)
top$Source[1:100]
top$Source[1:1000]
top$Source[2000:3000]
top <- top[2001:3000,]
head(top)
top$Source
first.thou <- read.csv("1000.csv", stringsAsFactors=FALSE)
head(first.thou)
second.thou <- read.csv("2000.csv", stringsAsFactors=FALSE)
second.thou <- second.thou[1001:2000, ]
head(second.thou)
tail(top)
tail(second.thou)
first.thou$Source
first.thou$Source
allsongs <- rbind(first.thou, second.thou)
allsongs$Source
write.csv("twothou.csv", row.names=FALSE)
write.csv(allsongs, "twothou.csv", row.names=FALSE)
top$Source
head(top)
allthesongs$Lyrics <- ""
allthesongs$Source <- ""
#for (s in 1:length(allthesongs$Song))  {
for (s in 2001:3000) {
lyrics <- "Not set yet."
results <- 12 # arbitrary number
# clean up the artist field to fit in the URL
artist <- strsplit(allthesongs$Artist[s], " featuring | feat | feat. | with | duet | and ")
artist <- unlist(artist)[[1]]
artist2 <- gsub("The ", "", artist)
# make URLs
metroURL <- paste("http://metrolyrics.com/",allthesongs$Song[s],"-lyrics-",artist2,".html",sep="")
songURL <- paste("http://songlyrics.com/",artist2,"/",allthesongs$Song[s],"-lyrics",sep="")
songnotheURL <- paste("http://songlyrics.com/",artist,"/",allthesongs$Song[s],"-lyrics",sep="")
URLs <- c(metroURL, songURL, songnotheURL)
lyriclocs <- c("//div[@id='lyrics-body-text']", "//p[@id='songLyricsDiv']", "//p[@id='songLyricsDiv']")
for (b in 1:length(URLs)) {
URL <- tolower(gsub(" ", "-", URLs[b]))
tryCatch({
results <- htmlTreeParse(URL, useInternal=TRUE, isURL=TRUE)
lyrics <- xpathSApply(results, lyriclocs[b], xmlValue) },
error = function(x) { message(paste(s, "This ain't workin'")) },
finally={
if (!is.numeric(results)) {
if (length(lyrics)!=0) {
allthesongs$Lyrics[s] <- lyrics[[1]]
allthesongs$Source[s] <- b
break
}
}
}) # end tryCatch
}
} # end for
three.thou <- allthesongs[2001:3000,]
head(middle)
tail(three.thou)
allsongs <- rbind(allsongs, three.thou, middle, bottom)
allsongs$Lyrics <- gsub("\\\n|\\\t"," ",allsongs$Lyrics)
allsongs$Lyrics <- tolower(gsub("[^[:alnum:] ]", "", allsongs$Lyrics))
nolyrics <- allsongs[allsongs$Source=="NA",]
242/5100
ones <- allsongs[allsongs$Source=="1",]
twos <- allsongs[allsongs$Source=="2", ]
242+4320+975
write.csv(allsongs, "final_all_songs_2.csv", row.names=FALSE)
# The function `show_word_counts(x,z)` takes two parameters: the word(s) to look for and the y-limit for the output plot.
show_word_counts <- function(y,z) { # where x is words to check and z is the y-lim value
alltogether <- data.frame()
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$Year
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
keysongs$V4 <- as.numeric(keysongs$V4)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,z) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
show_word_counts(c("heart", "love"), 200)
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
allthesongs <- data.frame()
for ( i in 1:length(allsongs$Lyrics) ) {
y<-strsplit(allsongs[i, ]$Lyrics, " ")
allsongs$wordcount[i] <- length(y[[1]])
}
wordcount <- aggregate(wordcount~Year, data=allsongs, FUN=sum)
show_word_counts("hate", 100)
library("knitr")
library("XML")
library("ggplot2")
library("stringr")
library("gridExtra")
opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE, fig.height=4)
show_word_counts("hate", 100)
x <- "hate"
y <- 100
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$Year
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
keysongs$V4 <- as.numeric(keysongs$V4)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
alltogether <- data.frame()
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$Year
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
keysongs$V4 <- as.numeric(keysongs$V4)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
alltogether
x <- "love"
y <- 500
alltogether <- data.frame()
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$Year
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
keysongs$V4 <- as.numeric(keysongs$V4)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
alltogether
y <- "lvoe"
y <- "love"
z <- 500
alltogether <- data.frame()
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$Year
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
keysongs$V4 <- as.numeric(keysongs$V4)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
alltogether
summary(allsongs$Source)
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
getwd()
setwd("/Users/kaylinwalker/R/kw_musiclyrics")
setwd("/Users/kaylinwalker/R/kw_musiclyrics")
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
summary(allsongs$Source)
length(allsongs$Source=="1")
ones <- allsongs[allsongs$Source=="1",]
twos <- allsongs[allsongs$Source=="2", ]
threes <- allsongs[allsongs$Source=="3", ]
4366/5100
1021/5100
allsongs$Source <- as.factor(allsongs$Source)
ones <- allsongs[allsongs$Source=="1",]
twos <- allsongs[allsongs$Source=="2", ]
threes <- allsongs[allsongs$Source=="3", ]
allsongs$Source[1:10]
ones <- allsongs[allsongs$Source==1,]
twos <- allsongs[allsongs$Source==2, ]
threes <- allsongs[allsongs$Source==3, ]
ones$Source
4366-288
1021-288
4078+1+733
twos
twos$Source
summary(twos$Source)
summary(ones$Source)
summary(threes$Source)
733+4078+1
+288
4812+288
4078/5100
733/5100
734/5100
288/5100
library("knitr")
library("XML")
library("ggplot2")
library("stringr")
library("gridExtra")
opts_chunk$set(echo=FALSE, warning=FALSE, cache=TRUE, message=FALSE, fig.height=4)
setwd("/Users/kaylinwalker/R/kw_musiclyrics")
allsongs <- read.csv("final_all_songs.csv", stringsAsFactors=FALSE)
allthesongs <- data.frame()
for ( i in 1:length(allsongs$Lyrics) ) {
y<-strsplit(allsongs[i, ]$Lyrics, " ")
allsongs$wordcount[i] <- length(y[[1]])
}
wordcount <- aggregate(wordcount~Year, data=allsongs, FUN=sum)
# The function `show_word_counts(y,z)` takes two parameters: the word(s) to look for and the y-limit for the output plot.
show_word_counts <- function(y,z) { # where y is words to check and z is the y-lim value
alltogether <- data.frame()
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$Year
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
keysongs$V4 <- as.numeric(keysongs$V4)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,z) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="Frequency") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
show_word_counts(c("free", "stuck"), 100)
show_word_counts(c("open", "close"), 100)
show_word_counts("hurt", 100)
show_word_counts("me", 100)
show_word_counts("me", 500)
show_word_counts("me", 1000)
show_word_counts("me", 1500)
show_word_counts("me", 2000)
show_word_counts("me", 2500)
show_word_counts(c("me", "you"), 2500)
wordcount
y <- "me"
z <- 2500
alltogether <- data.frame()
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$Year
keysongs <- as.data.frame(cbind(year, freq, word, wordcount$wordcount), stringsAsFactors=FALSE)
keysongs$V4 <- as.numeric(keysongs$V4)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,z) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="Frequency") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
head(keysongs)
head(wordcount)
allthesongs <- data.frame()
for ( i in 1:length(allsongs$Lyrics) ) {
y<-strsplit(allsongs[i, ]$Lyrics, " ")
allsongs$wordcount[i] <- length(y[[1]])
}
head(wordcount)
show_word_counts <- function(y,z) { # where y is words to check and z is the y-lim value
alltogether <- data.frame()
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$Year
totalwords <- allsongs$wordcount
keysongs <- as.data.frame(cbind(year, freq, word, totalwords), stringsAsFactors=FALSE)
keysongs$totalwords <- as.numeric(keysongs$totalwords)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,z) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="Frequency") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
y <- "me"
alltogether <- data.frame()
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$Year
totalwords <- allsongs$wordcount
keysongs <- as.data.frame(cbind(year, freq, word, totalwords), stringsAsFactors=FALSE)
keysongs$totalwords <- as.numeric(keysongs$totalwords)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,z) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="Frequency") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/allsongs$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
keysongs <- as.data.frame(cbind(year, freq, word, totalwords), stringsAsFactors=FALSE)
keysongs$totalwords <- as.numeric(keysongs$totalwords)
keysongs$freq <- as.numeric(keysongs$freq)
keysongs$rate <- (keysongs$freq/keysongs$totalwords)*10000
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
wordcount <- aggregate(wordcount~Year, data=allsongs, FUN=sum)
keysongs <- as.data.frame(cbind(year, freq, word, totalwords), stringsAsFactors=FALSE)
keysongs$totalwords <- as.numeric(keysongs$totalwords)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
combo
head(keysongs)
tail(keysongs)
combo <- aggregate(freq~year+word+totalwords, data=keysongs, FUN=sum)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
wordcount
combo$freq
# The function `show_word_counts(y,z)` takes two parameters: the word(s) to look for and the y-limit for the output plot.
show_word_counts <- function(y,z) { # where y is words to check and z is the y-lim value
alltogether <- data.frame()
for ( n in 1:length(y) ) {
freq <- sapply(gregexpr(y[n],allsongs$Lyrics),
function(x)
if(x[[1]]!=-1) { length(x) } else { 0 } )
word <- rep(y[n], length(freq))
year <- allsongs$Year
totalwords <- allsongs$wordcount
keysongs <- as.data.frame(cbind(year, freq, word, totalwords), stringsAsFactors=FALSE)
keysongs$totalwords <- as.numeric(keysongs$totalwords)
keysongs$freq <- as.numeric(keysongs$freq)
combo <- aggregate(freq~year+word, data=keysongs, FUN=sum)
combo$rate <- (combo$freq/wordcount$wordcount)*10000
alltogether <- rbind(alltogether, combo)
alltogether$year <- as.numeric(alltogether$year)
alltogether$word <- as.factor(alltogether$word)
}
ggplot(alltogether, aes(year, freq)) + geom_line(aes(color=word), size=1.25) + ylim(0,z) + scale_color_brewer(palette="Paired") + labs(title=paste("Billboard Year-End Hot 100 Singles 1964-2014\nlyrics containing", "Keywords"), x="", y="Frequency") + theme(plot.title = element_text(size=20, face="bold", vjust=2), axis.ticks.y = element_blank(), axis.ticks.x=element_blank(), panel.background = element_rect(fill = 'white'))
}
show_word_counts("murder", 100)
show_word_counts("kill", 100)
show_word_counts("hurt", 100)
show_word_counts(" die ", 100)
show_word_counts(" eat ", 100)
show_word_counts("food", 100)
show_word_counts("drink", 100)
show_word_counts("flower", 100)
show_word_counts("honey", 100)
show_word_counts("sweetie", 100)
show_word_counts("sweet", 100)
show_word_counts("dance", 100)
show_word_counts("love", 100)
show_word_counts("love", 1000)
show_word_counts("sleep", 100)
